{
  "QLayout": {
    "prefix": "qlayout",
    "body": [
      "<q-layout view=\"hHr LpR lFf\">$0</q-layout>"
    ],
    "description": "Layouts are the elements that wrap page content, like a navigational bar or drawer. Multiple pages can share the same Layout, so the code is reusable, which is one of their key points."
  },
  "QLayoutHeader": {
    "prefix": "qlayoutheader",
    "body": [
      "<q-layout-header ${1:reveal} v-model=\"${2:header}\">$0</q-layout-header>"
    ],
    "description": "Layout header"
  },
  "QLayoutFooter": {
    "prefix": "qlayoutfooter",
    "body": [
      "<q-layout-footer ${1:reveal} v-model=\"${2:footer}\">$0</q-layout-footer>"
    ],
    "description": "Layout footer"
  },
  "QLayoutDrawer": {
    "prefix": "qlayoutdrawer",
    "body": [
      "<q-layout-drawer side=\"${1:left}\">$0</q-layout-drawer>"
    ],
    "description": "Layout drawer"
  },
  "QPage": {
    "prefix": "qpage",
    "body": [
      "<q-page :style-fn=\"${1:myTweak}\">$0</q-page>"
    ],
    "description": "A component that holds page content"
  },
  "QPageSticky": {
    "prefix": "qpagesticky",
    "body": [
      "<q-page-sticky position=\"${1:top-right}\" :offset=\"[${2:18}, ${3:18}]\">",
      "\t<q-btn round color=\"${4:primary}\" @click=\"${5:alert}\" icon=\"${6:alarm}\" />",
      "</q-page-sticky>"
    ],
    "description": "A component that helps in placing DOM elements wrapped by it into a static position within the content area of your Layout, no matter where the user scrolls"
  },
  "QFab": {
    "prefix": "qfab",
    "body": [
      "<q-fab color=\"${1:primary}\" icon=\"${2:add}\" direction=\"${3:up}\">",
      "\t<q-fab-action color=\"${4:purple}\" @click=\"${5:someMethod}\" icon=\"${6:mail}\" />",
      "</q-fab>"
    ],
    "description": "A Floating Action Button (FAB) represents the primary action in an App Page. But, it’s not limited to only a single action. It can contain any number of sub-actions too"
  },
  "QResizeObservable": {
    "prefix": "qresizeobservable",
    "body": [
      "<div>",
      "\t<q-resize-observable @resize=\"${1:onResize}\" />$0",
      "</div>"
    ],
    "description": "A component that emits a resize event whenever the wrapping DOM element / component (defined as direct parent of QResizeObservable) changes its size"
  },
  "QWindowResizeObservable": {
    "prefix": "qwindowresizeobservable",
    "body": [
      "<q-window-resize-observable @resize=\"${1:onResize}\" />$0"
    ],
    "description": "A component that emits a resize event whenever the document viewport (window) changes its size"
  },
  "QBtn 1": {
    "prefix": "qbtn1",
    "body": [
      "<q-btn color=\"${1:primary}\" icon=\"${2:check}\" label=\"${3:OK}\" @click=\"${4:onClick}\" />$0"
    ],
    "description": "A button with a few extra useful features"
  },
  "QBtn 2": {
    "prefix": "qbtn2",
    "body": [
      "<q-btn color=\"${1:primary}\" icon=\"${2:check}\" label=\"${3:OK}\" @click=\"${4:onClick}\">$0</q-btn>"
    ],
    "description": "A button with a few extra useful features"
  },
  "QBtnGroup": {
    "prefix": "qbtngroup",
    "body": [
      "<q-btn-group>",
      "\t<q-btn label=\"${1:One}\" @click=\"${2:clickHandler1}\"/>",
      "\t<q-btn label=\"${3:Two}\" @click=\"${4:clickHandler2}\"/>",
      "\t<q-btn label=\"${5:Three}\" @click=\"${6:clickHandler3}\"/>",
      "</q-btn-group>"
    ],
    "description": "A group of QBtn components"
  },
  "QBtnDropdown": {
    "prefix": "qbtndropdown",
    "body": [
      "<q-btn-dropdown label=\"${1:Button}\">",
      "\t<q-list link>",
      "\t\t<q-item>",
      "\t\t\t<q-item-main>",
      "\t\t\t\t<q-item-tile label>${2:Item}</q-item-tile>",
      "\t\t\t</q-item-main>",
      "\t\t</q-item>",
      "\t</q-list>",
      "</q-btn-dropdown>"
    ],
    "description": "A convenient dropdown button. Goes very well with QList as dropdown content"
  },
  "QToolbar": {
    "prefix": "qtoolbar",
    "body": [
      "<q-toolbar color=\"${1:primary}\">$0</q-toolbar>"
    ],
    "description": "A Quasar Layout can have headers and/or footers (also called “marginals”) and this is a great place to use Toolbars, but note that you can also place Toolbars anywhere else you want. One QToolbar will represent a row in your marginals, usually used for navigation buttons and a title (but not limited to only this)."
  },
  "QToolbarTitle": {
    "prefix": "qtoolbartitle",
    "body": [
      "<q-toolbar-title>",
      "\t$0",
      "</q-toolbar-title>"
    ],
    "description": "Used to wrap the “title” of your Toolbar. It spreads horizontally to the full real estate space it can get. If not enough space to cover the full extent of the content then ending ellipsis are used."
  },
  "QTabs": {
    "prefix": "qtabs",
    "body": [
      "<q-tabs>",
      "\t<q-tab slot=\"${1:slot}\" name=\"${2:name}\" label=\"${3:label}\"/>",
      "\t<q-tab-pane name=\"${4:name}\">$0</q-tab-pane>",
      "</q-tabs>"
    ],
    "description": "Quasar Tabs are a way of displaying more information using less window real estate."
  },
  "QTab": {
    "prefix": "qtab",
    "body": [
      "<q-tab slot=\"${1:slot}\" name=\"${2:name}\" icon=\"${3:icon_name}\" label=\"${4:label}\">$0</q-tab>"
    ],
    "description": "QTab component is used to define a title for your Tab. Can be linked to a QTabPane through name prop."
  },
  "QTabPane": {
    "prefix": "qtabpane",
    "body": [
      "<q-tab-pane name=\"${1:name}\">$0</q-tab-pane>"
    ],
    "description": "The Tabs Pane component is useful, when the content of each tab is relatively small or simple."
  },
  "QRouteTab": {
    "prefix": "qroutetab",
    "body": [
      "<q-route-tab icon=\"${1:icon_name}\" to=\"${2:route}\" slot=\"${3:slot}\" ${4:exact}/>"
    ],
    "description": "You will, in most cases, want to use tabs within a layout component. Below is an example of how this would be done."
  },
  "QPullToRefresh": {
    "prefix": "qpulltorefresh",
    "body": [
      "<q-pull-to-refresh :handler=\"${1:refresher}\">",
      "\t$0",
      "</q-pull-to-refresh>"
    ],
    "description": "When you want to allow the user to refresh the content or retrieve the newest content."
  },
  "QContextMenu": {
    "prefix": "qcontextmenu",
    "body": [
      "<q-context-menu>",
      "\t<q-list link separator style=\"min-width: ${1:150px}; max-height: ${2:300px};\">",
      "\t\t<q-item v-close-overlay @click.native=\"${3:showToast}()\">",
      "\t\t\t<q-item-main label=\"${4:Label}\" sublabel=\"${5:Value}\" />",
      "\t\t</q-item>",
      "\t\t<q-item v-close-overlay @click.native=\"${6:showOtherToast}()\">",
      "\t\t\t<q-item-main label=\"${7:Other Label}\" sublabel=\"${8:Other Value}\" />",
      "\t\t</q-item>",
      "\t</q-list>",
      "</q-context-menu>"
    ],
    "description": "This component allows you to display a context menu (popup) instead of the default browser one when user performs a right-click (or long tap on touch capable devices)."
  },
  "QBreadcrumbs": {
    "prefix": "qbreadcrumbs",
    "body": [
      "<q-breadcrumbs>",
      "\t<q-breadcrumbs-el label=\"${1:Home}\" icon=\"${2:home}\" />",
      "\t<q-breadcrumbs-el label=\"${3:Components}\" icon=\"${4:widgets}\" />",
      "\t<q-breadcrumbs-el label=\"${5:Breadcrumbs}\" icon=\"${6:navigation}\" />",
      "</q-breadcrumbs>"
    ],
    "description": "Quasar Breadcrumbs is a component used as a navigational aid in UI. It allows users to keep track of their location within programs, documents, or websites."
  },
  "QPagination": {
    "prefix": "qpagination",
    "body": [
      "<q-pagination v-model=\"${1:page}\" :max=\"${2:6}\" />"
    ],
    "description": "The Quasar Pagination component is available for whenever a pagination system is required. It offers the user a simple UI to help you in moving between pages/items."
  },
  "QField": {
    "prefix": "qfield",
    "body": [
      "<q-field",
      "\ticon=\"${1:cloud}\"",
      "\tlabel=\"${2:Your Gmail}\"",
      "\thelper=\"${3:Helper}\"",
      "\t:error=\"${4:mailHasError}\"",
      "\terror-label=\"${5:We need a valid email}\"",
      "\t:count=\"${6:10}\"",
      ">",
      "\t$0",
      "</q-field>"
    ],
    "description": "A component that allows to easily build responsive Forms UI by wrapping each Form component (QInput, QSelect and so on) to enrich it with a main label, an icon, error placeholder and error state, helper placeholder and/or item/character counter."
  },
  "QInput": {
    "prefix": "qinput",
    "body": [
      "<q-input v-model=\"${1:text}\" type=\"${2:text}\" float-label=\"${3:Float Label}\" placeholder=\"${4:Gigi}\" />$0"
    ],
    "description": "A component that can be used for regular text input, passwords, email addresses, numbers, telephone numbers, urls and auto-growing text areas."
  },
  "QChipsInput": {
    "prefix": "qchipsinput",
    "body": [
      "<q-chips-input v-model=\"${1:model}\" float-label=\"${2:Floating Label}\" />"
    ],
    "description": "A component that allows user to enter a group of text items, which is also editable in the form of quick deletion of the Chips in the list."
  },
  "QColor": {
    "prefix": "qcolor",
    "body": [
      "<q-color v-model=\"${1:modelHex}\" float-label=\"${2:Floating Label}\" />"
    ],
    "description": "A component that provides a method to input colors."
  },
  "QColorPicker": {
    "prefix": "qcolorpicker",
    "body": [
      "<q-color-picker v-model=\"${1:modelHex}\" float-label=\"${2:Floating Label}\" />"
    ],
    "description": "A component that provides a method to input colors."
  },
  "QAutocomplete": {
    "prefix": "qautocomplete",
    "body": [
      "<q-autocomplete",
      "\t@search=\"${1:search}\"",
      "\t:min-characters=\"${2:3}\"",
      "\t@selected=\"${3:selected}\"",
      "/>"
    ],
    "description": "A component that binds to the parent textfield (eg. QInput, QSearch, QChipsInput) and offers suggestions to the user, while the user is typing."
  },
  "QEditor": {
    "prefix": "qeditor",
    "body": [
      "<q-editor v-model=\"${1:model}\" />$0"
    ],
    "description": "A WYSIWYG (“what you see is what you get”) editor component."
  },
  "QSearch": {
    "prefix": "qsearch",
    "body": [
      "<q-search v-model=\"${1:search}\" icon=\"${2:place}\" float-label=\"${2:search for a place}\" ${3:clearable} />"
    ],
    "description": "A component that offers the user an input field with additional features for searching purposes."
  },
  "QSlider": {
    "prefix": "qslider",
    "body": [
      "<q-slider v-model=\"${1:selectedValue}\" :min=\"${2:1}\" :max=\"${3:7}\" :step=\"${4:2}\" />"
    ],
    "description": "Slider component is a great way to make the user specify a number value between a minimum and maximum value, with optional steps between valid values"
  },
  "QRange": {
    "prefix": "qrange",
    "body": [
      "<q-range v-model=\"${1:rangeValues}\" :min=\"${2:0}\" :max=\"${3:10}\" :step=\"${4:1}\" />"
    ],
    "description": "Range component is a great way to offer the user the selection of a sub-range of values between a minimum and maximum value, with optional steps to select those values"
  },
  "QRadio": {
    "prefix": "qradio",
    "body": [
      "<q-radio v-model=\"${1:option}\" val=\"${2:opt1}\" label=\"${3:Option 1}\" />"
    ],
    "description": "The Quasar Radio component is another basic element for user input. You can use this to supply a way for the user to pick an option from multiple choices."
  },
  "QCheckbox": {
    "prefix": "qcheckbox",
    "body": [
      "<q-checkbox v-model=\"${1:selection}\" val=\"${2:one}\" label=\"${3:One}\" />"
    ],
    "description": "The Quasar Checkbox component is a basic element to be used for selection or toggling by the user."
  },
  "QToggle": {
    "prefix": "qtoggle",
    "body": [
      "<q-toggle v-model=\"${1:selection}\" val=\"${2:one}\" label=\"${3:One}\" />"
    ],
    "description": "The Quasar Toggle component is another basic element for user input. You can use this for turning settings, features or true/ false inputs on and off."
  },
  "QBtnToggle": {
    "prefix": "qbtntoggle",
    "body": [
      "<q-btn-toggle",
      "\tv-model=\"${1:model}\"",
      "\ttoggle-color=\"${2:primary}\"",
      "\t:options=\"[",
      "\t\t{label: '${3:One}', value: '${4:one}'},",
      "\t\t{label: '${5:Two}', value: '${6:two}'},",
      "\t\t{label: '${7:Three}', value: '${8:three}'}",
      "\t]\"",
      "/>"
    ],
    "description": "The QBtnToggle component is another basic element for user input, similar to QRadio but with buttons. You can use this to supply a way for the user to pick an option from multiple choices."
  },
  "QOptionGroup": {
    "prefix": "qoptiongroup",
    "body": [
      "<q-option-group",
      "\tcolor=\"${1:secondary}\"",
      "\ttype=\"${2:checkbox}\"",
      "\tv-model=\"${3:group}\"",
      "\t:options=\"[",
      "\t\t{ label: '${4:Option 1}', value: '${5:op1}' },",
      "\t\t{ label: '${6:Option 2}', value: '${7:op2}' },",
      "\t\t{ label: '${8:Option 3}', value: '${9:op3}' }",
      "\t]\"",
      "/>"
    ],
    "description": "The Quasar Option Group component is a helper component, which allows you to better control the grouping of binary (as in on or off, true or false, 1 or 0) form input components like checkboxes, radios or toggles."
  },
  "QDatetime": {
    "prefix": "qdatetime",
    "body": [
      "<q-datetime v-model=\"${1:model}\" type=\"${2:datetime}\" />"
    ],
    "description": "The Datetime component provides a method to input dates and time or both."
  },
  "QDatetimePicker": {
    "prefix": "qdatetimepicker",
    "body": [
      "<q-datetime-picker v-model=\"${1:model}\" type=\"${2:datetime}\" />"
    ],
    "description": "The DatetimePicker component provides a method to input dates and time or both."
  },
  "QSelect": {
    "prefix": "qselect",
    "body": [
      "<q-select",
      "\tv-model=\"${1:select}\"",
      "\tfloat-label=\"${2:Is Quasar Awesome?}\"",
      "\t${3:radio}",
      ":options=\"${4:selectOptions}\"",
      "/>"
    ],
    "description": "Select component has two types of selection: single selection (using Radios or Lists) or multiple selection (using Checkboxes or Toggles). This component opens up a Popover for the selection list and action. A filter can also be used for longer lists."
  },
  "QRating": {
    "prefix": "qrating",
    "body": [
      "<q-rating v-model=\"${1:ratingModel}\" :max=\"${2:3}\" />"
    ],
    "description": "Quasar Rating is a Component which allows users to rate items, usually known as “Star Rating”."
  },
  "QKnob": {
    "prefix": "qknob",
    "body": [
      "<q-knob",
      "\tv-model=\"${1:model}\"",
      "\t:min=\"${2:min}\"",
      "\t:max=\"${3:max}\"",
      "\t:placeholder=\"${4:'$ ' + model}\"",
      "/>"
    ],
    "description": "Quasar Knob is another way of making the user select a Number value from a predefined range. With optional steps included."
  },
  "QUploader": {
    "prefix": "quploader",
    "body": [
      "<q-uploader :url=\"${1:url}\" />"
    ],
    "description": "Quasar supplies a way for you to upload files through QUploader component."
  },
  "QCard": {
    "prefix": "qcard",
    "body": [
      "<q-card>",
      "\t<q-card-title>",
      "\t\t${1:Card Title}",
      "\t</q-card-title>",
      "\t<q-card-separator />",
      "\t<q-card-main>",
      "\t\t${2:Card Content}",
      "\t</q-card-main>",
      "</q-card>"
    ],
    "description": "Quasar Cards are a great way to display important pieces of content, and are quickly emerging as a core design pattern for Apps."
  },
  "QCardTitle": {
    "prefix": "qcardtitle",
    "body": [
      "<q-card-title>$1</q-card-title>"
    ],
    "description": "QCardTitle has three main areas (all are optional): title, subtitle (“subtitle” slot) and right side (“right” slot)."
  },
  "QCardMain": {
    "prefix": "qcardmain",
    "body": [
      "<q-card-main>$1</q-card-main>"
    ],
    "description": "QCardMain  defines an area containing the main Card content, like description, details or anything you need outside of the other Card component’s purpose."
  },
  "QCardActions": {
    "prefix": "qcardactions",
    "body": [
      "<q-card-actions ${1:vertical} align=\"${2:center}\">",
      "\t<q-btn flat label=\"${3:Action 1}\" />",
      "\t<q-btn flat label=\"${4:Action 2}\" />",
      "</q-card-actions>"
    ],
    "description": "Cards can have some actions (buttons) attached to them."
  },
  "QCardMedia": {
    "prefix": "qcardmedia",
    "body": [
      "<q-card-media>",
      "\t<img src=\"${1:~assets/some-image.jpg}\">",
      "</q-card-media>"
    ],
    "description": "Cards can also contain media elements: images, videos (through QVideo) or a parallax (through QParallax). This can be done through QCardMedia component, which supports an optional overlay too (for things like title and/or subtitle)."
  },
  "QCardSeparator": {
    "prefix": "qcardseparator",
    "body": [
      "<q-card-separator />"
    ],
    "description": "You can choose to add a separator between Card components, which is basically a horizontal thin line, by adding QCardSeparator."
  },
  "QCollapsible": {
    "prefix": "qcollapsible",
    "body": [
      "<q-collapsible group=\"${1:somegroup}\" icon=\"${2:explore}\" label=\"${3:First}\">",
      "\t<div>",
      "\t\t$0",
      "\t</div>",
      "</q-collapsible>"
    ],
    "description": "Quasar Collapsibles allow the hiding of content that is not immediately relevant to the user. Think of them as accordion elements that expand when clicked on."
  },
  "QTable": {
    "prefix": "qtable",
    "body": [
      "<q-table",
      "\ttitle=\"${1:Table Title}\"",
      "\t:data=\"${2:tableData}\"",
      "\t:columns=\"${3:columns}\"",
      "\trow-key=\"${4:name}\"",
      "/>"
    ],
    "description": "QTable is a Component that allows you to display data in a tabular manner."
  },
  "QList": {
    "prefix": "qlist",
    "body": [
      "<q-list ${1:highlight}>",
      "\t<q-list-header>${2:Recent chats}</q-list-header>",
      "\t<q-item>",
      "\t\t<q-item-side avatar=\"${3:statics/linux-avatar.png}\" />",
      "\t\t<q-item-main label=\"${4:Jim Doe}\" />",
      "\t\t<q-item-side right icon=\"${5:chat_bubble}\" />",
      "\t</q-item>",
      "</q-list>"
    ],
    "description": "Quasar Lists and List Items are a group of components which can work together to present multiple line items vertically as a single continuous element."
  },
  "QItem": {
    "prefix": "qitem",
    "body": [
      "<q-item tag=\"${1:label}\">",
      "\t<q-item-side>",
      "\t\t${2:<q-checkbox v-model=\"checkboxModel\" />}",
      "\t</q-item-side>",
      "\t<q-item-main>",
      "\t\t<q-item-tile label>${3:Notifications}</q-item-tile>",
      "\t\t<q-item-tile sublabel>${4:Notify me about updates}</q-item-tile>",
      "\t</q-item-main>",
      "\t<q-item-side right>",
      "\t\t${5:<q-item-tile icon=\"chat_bubble\" color=\"green\" />}",
      "\t</q-item-side>",
      "</q-item>"
    ],
    "description": "Lists can encapsulate Items or Item-like components, for example QCollapsible."
  },
  "QStepper": {
    "prefix": "qstepper",
    "body": [
      "<q-stepper ref=\"${1:stepper}\">",
      "\t<q-step default title=\"${2:First Step}\" subtitle=\"${3:Here we go}\">",
      "\t\t${4:step 1 content}",
      "\t</q-step>",
      "\t<q-step title=\"${5:Step 2}\" subtitle=\"${6:Review and submit}\">",
      "\t\t${7:step 2 content}",
      "\t</q-step>",
      "</q-stepper>"
    ],
    "description": "Quasar Stepper conveys progress through numbered steps. Steppers display progress through a sequence of logical and numbered steps."
  },
  "QStepperNavigation": {
    "prefix": "qsteppernavigation",
    "body": [
      "<q-stepper-navigation>",
      "\t<q-btn",
      "\t\t@click=\"${1:$refs.stepper.previous()}\"",
      "\t\tlabel=\"${2:Back}\"",
      "\t/>",
      "\t<q-btn",
      "\t\t@click=\"${3:$refs.stepper.next()}\"",
      "\t\tlabel=\"${4:Next}\"",
      "\t/>",
      "</q-stepper-navigation>"
    ],
    "description": "QStepperNavigation is a helper for encapsulating Stepper navigation buttons (within QStep or globally for the stepper as direct child of QStepper)"
  },
  "QTree": {
    "prefix": "qtree",
    "body": [
      "<q-tree",
      "\t:nodes=\"${1:simple}\"",
      "\tnode-key=\"${2:label}\"",
      "/>"
    ],
    "description": "Quasar Tree represents a highly configurable component that displays hierarchical data, such as a table of contents in a tree structure."
  },
  "QActionSheet": {
    "prefix": "qactionsheet",
    "body": [
      "<q-action-sheet",
      "\tv-model=\"${1:actionSheet}\"",
      "\ttitle=\"${2:Action Sheet}\"",
      "\t@ok=\"${3:onOk}\"",
      "\t@cancel=\"${4:onCancel}\"",
      "\t@show=\"${5:onShow}\"",
      "\t@hide=\"${6:onHide}\"",
      "\t:actions=\"[",
      "\t\t{",
      "\t\t\tlabel: '${7:Delete}',",
      "\t\t\ticon: '${8:delete}',",
      "\t\t\tcolor: '${9:red}',",
      "\t\t\thandler: ${10:deleteAction}",
      "\t\t}",
      "\t]\"",
      "/>$0"
    ],
    "description": "Action Sheets slide up from the bottom edge of the device screen, and display a set of options with the ability to confirm or cancel an action. Action Sheets can sometimes be used as an alternative to menus, however, they should not be used for navigation."
  },
  "QDialog": {
    "prefix": "qdialog",
    "body": [
      "<q-dialog",
      "\tv-model=\"${1:customDialogModel}\"",
      "\t${2:stack-buttons}",
      "\t${3:prevent-close}",
      "\t@ok=\"${4:onOk}\"",
      "\t@cancel=\"${5:onCancel}\"",
      "\t@show=\"${6:onShow}\"",
      "\t@hide=\"${7:onHide}\"",
      "/>"
    ],
    "description": "Quasar Dialogs are a great way to offer the user the ability to choose a specific action or list of actions. They also can provide the user with important information, or require them to make a decision (or multiple decisions)."
  },
  "QModal": {
    "prefix": "qmodal",
    "body": [
      "<q-modal v-model=\"${1:opened}\">",
      "\t$0",
      "</q-modal>"
    ],
    "description": "The Quasar Modal component is a UI overlay, which offers extended screen space to allow the user to get more work done."
  },
  "QPopover": {
    "prefix": "qpopover",
    "body": [
      "<q-popover v-model=\"${1:showing}\">",
      "\t$0",
      "</q-popover>"
    ],
    "description": "QPopover should be used when you want a menu (or any content) to be displayed on a popup as a result of user clicking/tapping on a DOM element / component."
  },
  "QTooltip": {
    "prefix": "qtooltip",
    "body": [
      "<q-tooltip v-model=\"${1:showing}\">",
      "\t$0",
      "</q-tooltip>"
    ],
    "description": "QTooltip should be used when you want to offer the user more information about a certain area in your App. When hovering the mouse over the target element (or quickly tapping on mobile platforms), the Tooltip will appear."
  },
  "QPopupEdit": {
    "prefix": "qpopupedit",
    "body": [
      "<q-popup-edit v-model=\"${1:model}\">",
      "\t$0",
      "</q-popup-edit>"
    ],
    "description": "QPopupEdit is a component that can be used to edit a value “in place”, like for example a cell in a QTable."
  },
  "QAjaxBar": {
    "prefix": "qajaxbar",
    "body": [
      "<q-ajax-bar position=\"${1:top}\" size=\"${2:4px}\" color=\"${3:red}\" />"
    ],
    "description": "Ajax Bar is a component which displays a loading bar (like Youtube) whenever an Ajax call (regardless of Ajax library used) is in progress. It can be manually triggered as well."
  },
  "QInnerLoading": {
    "prefix": "qinnerloading",
    "body": [
      "<q-inner-loading :visible=\"${1:visible}\">",
      "\t<q-spinner-gears size=\"${2:50px}\" color=\"${3:primary}\"></q-spinner-gears>",
      "</q-inner-loading>"
    ],
    "description": "The QInnerLoading component allows you to add a progress animation within a component."
  },
  "QProgress": {
    "prefix": "qprogress",
    "body": [
      "<q-progress",
      "\t:percentage=\"${1:progressBuffer}\"",
      "\t:buffer=\"${2:buffer}\"",
      "\tstyle=\"${3:height: 4px}\"",
      "/>"
    ],
    "description": "A Progress bar is used to show a process is being worked on, so the user isn’t staring at a static page, even though the system is working in the background."
  },
  "QSpinner": {
    "prefix": "qspinner",
    "body": [
      "<q-spinner${1:-gears} color=\"${2:teal-4}\" size=\"${3:40px}\" />"
    ],
    "description": "A Spinner is used to show the user a timely process is currently taking place."
  },
  "QCarousel": {
    "prefix": "qcarousel",
    "body": [
      "<q-carousel class=\"${1:text-white}\">",
      "\t<q-carousel-slide class=\"${2:bg-primary}\">",
      "\t\t${3:Slide 1}",
      "\t</q-carousel-slide>",
      "\t<q-carousel-slide class=\"${4:bg-secondary}\">",
      "\t\t${5:Slide 2}",
      "\t</q-carousel-slide>",
      "</q-carousel>"
    ],
    "description": "Quasar Carousel is a Vue Component which you can use to display more information with less real estate, using slides. Useful for creating Wizards too."
  },
  "QParallax": {
    "prefix": "qparallax",
    "body": [
      "<q-parallax>",
      "\t<img slot=\"media\" src=\"${1:assets/parallax2.jpg}\">",
      "\t${2:<h1>Slot</h1>}",
      "</q-parallax>"
    ],
    "description": "Parallax scrolling is a technique in computer graphics and web design, where background images move by the camera slower than foreground images, creating an illusion of depth in a 2D scene and adding to the immersion."
  },
  "QVideo": {
    "prefix": "qvideo",
    "body": [
      "<q-video",
      "\tsrc=\"${1:https://www.youtube.com/embed/k3_tw44QsZQ?rel=0}\"",
      "\tstyle=\":width: ${2:853px}; height: ${3:480px}\"",
      "/>"
    ],
    "description": "Embedding a video like Youtube is easy. It also resizes to fit the container by default."
  },
  "QScrollObservable": {
    "prefix": "qscrollobservable",
    "body": [
      "<q-scroll-observable @scroll=\"${1:userHasScrolled}\" />"
    ],
    "description": "QScrollObservable is a Quasar component that emits a scroll event whenever the user scrolls the page or overflowed container with .scroll CSS class applied to it."
  },
  "QInfiniteScroll": {
    "prefix": "qinfinitescroll",
    "body": [
      "<q-infinite-scroll :handler=\"${1:loadMore}\">",
      "\t<div v-for=\"${2:item} in ${3:items}\">",
      "\t\t$0",
      "\t</div>",
      "\t<q-spinner-dots slot=\"message\" :size=\"40\"></q-spinner-dots>",
      "</q-infinite-scroll>"
    ],
    "description": "When you want to progressively load new content as the user scrolls down your Page, use QInfiniteScroll component."
  },
  "QSeparator": {
    "prefix": "qseparator",
    "body": [
      "<q-separator spaced=\"${1:false}\" inset=\"${2:false}\" />"
    ],
    "description": "The QSeparator Component is used to separate sections of text, other components, etc… It creates a colored line across the width of the parent. It can be horizontal or vertical."
  },
  "QScrollArea": {
    "prefix": "qscrollarea",
    "body": [
      "<q-scroll-area style=\"width: ${1:400px}; height: ${2:100px};\">",
      "\t<div v-for=\"${3:n} in ${4:10}\">",
      "\t\tLorem ipsum dolor sit amet, consectetur adipisicing",
      "\t</div>",
      "</q-scroll-area>"
    ],
    "description": "Quasar offers a neat way of customizing the scrollbars with the help of QScrollArea component which can encapsulate your content. Think of it as a DOM element which has overflow: auto, but with your own custom styled scrollbar instead of browser’s default one and a few nice features on top."
  }
}
