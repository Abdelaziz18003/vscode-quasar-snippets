{
  "QLayout": {
    "prefix": "qlayout",
    "body": [
      "q-layout(view='${1:hHr LpR lFf}', ${2:container}) $0"
    ],
    "description": "The QLayout is a component designed to manage the entire window and wrap page content with elements such as a navigational bar or a drawer. Multiple pages can share the same QLayout, so the code is reusable, which is one of their key points."
  },
  "QHeader": {
    "prefix": "qheader",
    "body": [
      "q-header(v-model='${1:header}', ${2:reveal}, ${3:elevated}, ${4:bordered}) $0"
    ],
    "description": "Layout header"
  },
  "QFooter": {
    "prefix": "qfooter",
    "body": [
      "q-footer(v-model='${1:footer}', ${2:reveal}, ${3:elevated}, ${4:bordered}) $0"
    ],
    "description": "Layout footer"
  },
  "QDrawer": {
    "prefix": "qdrawer",
    "body": [
      "q-layout-drawer(side='${1:left}', v-model='${2:drawerLeft}', ${3:bordered}, :width='${4:200}', :breakpoint='${5:500}', content-class='${6:bg-grey-3}') $0"
    ],
    "description": "QDrawer is the sidebar part of your QLayout."
  },
  "QPageContainer": {
    "prefix": "qpagecontainer",
    "body": [
      "q-page-container $0"
    ],
    "description": "Usually, the QPageContainer is part of the Layout template (where it contains a <router-view /> child only), and its content goes into separate vue files under /src/pages."
  },
  "QPage": {
    "prefix": "qpage",
    "body": [
      "q-page(:style-fn='${1:myTweak}', ${2:padding}) $0"
    ],
    "description": "A component that holds page content"
  },
  "QPageSticky": {
    "prefix": "qpagesticky",
    "body": [
      "q-page-sticky(position='${1:top-right}', :offset='[${2:18,18}]', ${3:expand}) $0"
    ],
    "description": "The QPageSticky component helps in placing DOM elements / components wrapped by it into a static position within the content area of your QPage, no matter where the user scrolls."
  },
  "QPageScroller": {
    "prefix": "qpagescroller",
    "body": [
      "q-page-scroller(position='${1:bottom-right}', :scroll-offset='${2:150}', :offset='[${3:18, 18}]')",
      "\tq-btn(fab, icon='keyboard_arrow_up', color='accent')"
    ],
    "description": "The QPageScroller component helps in placing DOM elements / components wrapped by it into a static position within the content area of your QPage, no matter where the user scrolls. It only appears after a scroll-offset (property) is reached. Once visible, the user can click on it to quickly get back to the top of the page via duration property."
  },
  "QFab": {
    "prefix": "qfab",
    "body": [
      "q-fab(color='${1:primary}', icon='${2:add}', direction='${3:up}')",
      "\tq-fab-action(color='${4:purple}', @click='${5:someMethod}', icon='${6:mail}')"
    ],
    "description": "A Floating Action Button (FAB) represents the primary action in an App Page. But, it’s not limited to only a single action. It can contain any number of sub-actions too"
  },
  "QAjaxBar": {
    "prefix": "qajaxbar",
    "body": [
      "q-ajax-bar(position='${1:top}', size='${2:4px}', color='${3:red}', ${4:skip-hijack})"
    ],
    "description": "QAjaxBar is a component which displays a loading bar (like Youtube) whenever an Ajax call (regardless of Ajax library used) is in progress. It can be manually triggered as well."
  },
  "QAvatar": {
    "prefix": "qavatar",
    "body": [
      "q-avatar(size='${1:100px}', font-size='${2:52px}', color='${3:teal}', text-color='${4:white}', icon='${5:directions}')"
    ],
    "description": "The QAvatar component creates a scalable, color-able element that can have text, icon or image within its shape. By default it is circular, but it can also be square or have a border-radius applied to give rounded corners to the square shape."
  },
  "QBadge": {
    "prefix": "qbadge",
    "body": [
      "q-badge(color='{1:orange}', text-color='{2:black}', label='{3:v1.0.0}')"
    ],
    "description": "The QBadge component allows you to create a small badge for adding information like contextual data that needs to stand out and get noticed. It is also often useful in combination with other elements like a user avatar to show a number of new messages."
  },
  "QBanner": {
    "prefix": "qbanner",
    "body": [
      "q-banner.{1:bg-primary.text-white}",
      "\t| {2:Unfortunately, the credit card did not go through, please try again.}",
      "\ttemplate(v-slot:action)"
    ],
    "description": "The QBanner component creates a banner element to display a prominent message and related optional actions."
  },
  "QBar": {
    "prefix": "qbar",
    "body": [
      "q-bar.${1:bg-primary.text-white}(dark)",
      "\tq-btn(dense, flat, round, icon='lens', size='8.5px', color='red')",
      "\t\tq-btn(dense, flat, round, icon='lens', size='8.5px', color='yellow')",
      "\t\t\tq-btn(dense, flat, round, icon='lens', size='8.5px', color='green')",
      "\t\t\t\t.col.text-center.text-weight-bold ${2:My-App}"
    ],
    "description": "The QBar is a small component for creating the top bar on different types of mobile or desktop websites/apps."
  },
  "QBreadcrumbs": {
    "prefix": "qbreadcrumbs",
    "body": [
      "q-breadcrumbs",
      "\tq-breadcrumbs-el(label='${1:Home}', icon='${2:home}')",
      "\t\tq-breadcrumbs-el(label='${3:Components}', icon='${4:widgets}')",
      "\t\t\tq-breadcrumbs-el(label='${5:Breadcrumbs}', icon='${6:navigation}')"
    ],
    "description": "The QBreadcrumbs component is used as a navigational aid in UI. It allows users to keep track of their location within programs, documents, or websites. Most common use is it’s in a QToolbar, but it’s not limited to it."
  },
  "QBtn": {
    "prefix": "qbtn",
    "body": [
      "q-btn(color='${1:primary}', icon='${2:check}', label='${3:OK}', @click='${4:onClick}') $0"
    ],
    "description": "QBtn is a button with a few extra useful features. For instance, it comes in two shapes: rectangle (default) and round. It also has the material ripple effect baked in (which can be disabled)."
  },
  "QBtnGroup": {
    "prefix": "qbtngroup",
    "body": [
      "q-btn-group",
      "\tq-btn(label='${1:One}', @click='${2:clickHandler1}')",
      "\t\tq-btn(label='${3:Two}', @click='${4:clickHandler2}')",
      "\t\t\tq-btn(label='${5:Three}', @click='${6:clickHandler3}')"
    ],
    "description": "You can conveniently group QBtn and QBtnDropdown using QBtnGroup"
  },
  "QBtnDropdown": {
    "prefix": "qbtndropdown",
    "body": [
      "q-btn-dropdown(label='${1:Button}', color='${2:primary}')",
      "\tq-list",
      "\t\tq-item(clickable, v-close-popup, @click='${3:onItemClick}')",
      "\t\t\tq-item-section",
      "\t\t\t\tq-item-label ${4:Photos}"
    ],
    "description": "QBtnDropdown is a very convenient dropdown button. Goes very well with QList as dropdown content, but it’s by no means limited to it."
  },
  "QCard": {
    "prefix": "qcard",
    "body": [
      "q-card.my-card",
      "\timg(src='${1:https://cdn.quasar.dev/img/mountains.jpg}')",
      "\tq-card-section",
      "\t\t.text-h6 ${2:Our Changing Planet}",
      "\t\t.text-subtitle2 ${3:by John Doe}",
      "\tq-card-section ${4:Lorem ipsum dolor sit amet, consectetur adipiscing elit}"
    ],
    "description": "The QCard component is a great way to display important pieces of grouped content. This pattern is quickly emerging as a core design pattern for Apps, website previews and email content. It assists the viewer by containing and organizing information, while also setting up predictable expectations."
  },
  "QCardSection": {
    "prefix": "qcardsection",
    "body": [
      "q-card-section Lorem ipsum dolor sit amet"
    ],
    "description": "No Description yet."
  },
  "QCardActions": {
    "prefix": "qcardactions",
    "body": [
      "q-card-actions(${1:vertical}, align='${2:center}')",
      "\tq-btn(flat, label='${3:Action 1}')",
      "\t\tq-btn(flat, label='${4:Action 2}')"
    ],
    "description": "Cards can have some actions (buttons) attached to them."
  },
  "QCarousel": {
    "prefix": "qcarousel",
    "body": [
      "q-carousel.bg-purple.text-white.shadow-1.rounded-borders(v-model='slide', transition-prev='jump-right', transition-next='jump-left', swipeable, animated, control-color='white', prev-icon='arrow_left', next-icon='arrow_right', navigation-icon='radio_button_unchecked', navigation, padding, arrows, height='300px')",
      "\tq-carousel-slide.column.no-wrap.flex-center(name='style')",
      "\t\tq-icon(name='style', size='56px')",
      "\t\t\t.q-mt-md.text-center Lorem ipsum dolor sit amet, consectetur adipiscing elit",
      "\tq-carousel-slide.column.no-wrap.flex-center(name='tv')",
      "\t\tq-icon(name='live_tv', size='56px')",
      "\t\t\t.q-mt-md.text-center Lorem ipsum dolor sit amet, consectetur adipiscing elit"
    ],
    "description": "The QCarousel component allows you to display more information with less real estate, using slides. Useful for creating Wizards or an image gallery too."
  },
  "QChatMessage": {
    "prefix": "qchatmessage",
    "body": [
      "q-chat-message(name='${1:me}', avatar='${2:https://cdn.quasar.dev/img/avatar3.jpg}', :text='['${3:hey, how are you?}']', stamp='${4:7 minutes ago}', ${5:sent}, bg-color='${6:amber-7}')"
    ],
    "description": "Quasar supplies a chat component called QChatMessage which is really a chat entry that renders the data given by the props."
  },
  "QChip": {
    "prefix": "qchip",
    "body": [
      "q-chip.${1:glossy}(icon='${2:directions}', label='${3:Get directions}')"
    ],
    "description": "The QChip component is basically a simple UI block entity, representing for example more advanced underlying data, such as a contact, in a compact way."
  },
  "QCircularProgress": {
    "prefix": "qcircularprogress",
    "body": [
      "q-circular-progress.${7:q-ma-md}(${1:indeterminate}, size='${2:90px}', :thickness='${3:0.2}', color='${4:lime}', center-color='${5:grey-8}', track-color='${6:transparent}')"
    ],
    "description": "The QCircularProgress component displays a colored circular progress. The bar can either have a determinate progress, or an indeterminate animation. It should be used to inform the user that an action is occurring in the background."
  },
  "QColor": {
    "prefix": "qcolor",
    "body": [
      "q-color.my-picker(v-model='hex', inline)"
    ],
    "description": "The QColor component provides a method to input colors."
  },
  "QDialog": {
    "prefix": "qdialog",
    "body": [
      "q-dialog(v-model='${1:confirm}', persistent)",
      "\tq-card",
      "\t\tq-card-section.row.items-center",
      "\t\t\tq-avatar(icon='signal_wifi_off', color='primary', text-color='white')",
      "\t\t\t\tspan.q-ml-sm You are currently not connected to any network.",
      "\t\tq-card-actions(align='right')",
      "\t\t\tq-btn(flat, label='${2:Cancel}', color='primary', v-close-popup)",
      "\t\t\t\tq-btn(flat, label='${3:Turn on Wifi}', color='primary', v-close-popup)"
    ],
    "description": "The QDialog component is a great way to offer the user the ability to choose a specific action or list of actions. They also can provide the user with important information, or require them to make a decision (or multiple decisions)."
  },
  "QEditor": {
    "prefix": "qeditor",
    "body": [
      "q-editor(v-model='${1:editor}', min-height='${2:5rem}', ${3:flat})"
    ],
    "description": "The QEditor component is a WYSIWYG (“what you see is what you get”) editor component that enables the user to write and even paste HTML."
  },
  "QExpansionItem": {
    "prefix": "qexpansionitem",
    "body": [
      "q-expansion-item(${1:expand-separator}, icon='${2:perm_identity}', label='${3:Account settings}', caption='${4:John Doe}') $0"
    ],
    "description": "The QExpansionItem component allows the hiding of content that is not immediately relevant to the user. Think of them as accordion elements that expand when clicked on. It’s also known as a collapsible."
  },
  "QInput": {
    "prefix": "qinput",
    "body": [
      "q-input(v-model='${1:text}', type='${2:text}', label='${3:Label}') $0"
    ],
    "description": "The QInput component is used to capture text input from the user. It uses v-model, similar to a regular input. It has support for errors and validation, and comes in a variety of styles, colors, and types."
  },
  "QSelect": {
    "prefix": "qselect",
    "body": [
      "q-select(v-model='${1:model}', :options='${2:options}', label='${3:Standard}', ${4:filled})"
    ],
    "description": "The QSelect component has two types of selection: single or multiple. This component opens up a menu for the selection list and action. A filter can also be used for longer lists."
  },
  "QForm": {
    "prefix": "qform",
    "body": [
      "q-form.q-gutter-md(@submit='${1:onSubmit}', @reset='${2:onReset}')",
      "\t| $0",
      "\tdiv",
      "\t\tq-btn(label='${3:Submit}', type='submit', color='primary')",
      "\t\t\tq-btn.q-ml-sm(label='${4:Reset}', type='reset', color='primary', flat)"
    ],
    "description": "The QForm component renders a <form> DOM element and allows you to easily validate child form components (like QInput, QSelect or your QField wrapped components) that have the internal validation (NOT the external one) through rules associated with them."
  },
  "QField": {
    "prefix": "qfield",
    "body": [
      "q-field(${1:rounded}, ${2:filled}, label='${3:Rounded filled}', ${4:stack-label}) $0"
    ],
    "description": "The QField component is used to provide common functionality and aspect to form components. It uses :value (or v-model if you want to use clearable property) to have knowledge of the model of the component inside. It has support for labels, hints, errors, validation, and comes in a variety of styles and colors."
  },
  "QRadio": {
    "prefix": "qradio",
    "body": [
      "q-radio(v-model='${1:shape}', val='${2:line}', label='${3:Line}')"
    ],
    "description": "The QRadio component is another basic element for user input. You can use this to supply a way for the user to pick an option from multiple choices."
  },
  "QCheckbox": {
    "prefix": "qcheckbox",
    "body": [
      "q-checkbox(${1:left-label}, v-model='${2:orange}', label='${3:Orange}')"
    ],
    "description": "The QCheckbox component is another basic element for user input. You can use this to supply a way for the user to toggle an option."
  },
  "QToggle": {
    "prefix": "qtoggle",
    "body": [
      "q-toggle(v-model='${1:value}', color='${2:green}')"
    ],
    "description": "The QToggle component is another basic element for user input. You can use this for turning settings, features or true/false inputs on and off."
  },
  "QBtnToggle": {
    "prefix": "qbtntoggle",
    "body": [
      "q-btn-toggle(v-model='${1:model}', toggle-color='${2:primary}', :options='[ {label: '${3:One}', value: '${4:one}'}, {label: '${5:Two}', value: '${6:two}'}, {label: '${7:Three}', value: '${8:three}'} ]')"
    ],
    "description": "The QBtnToggle component is another basic element for user input, similar to QRadio but with buttons. You can use this to supply a way for the user to pick an option from multiple choices."
  },
  "QOptionGroup": {
    "prefix": "qoptiongroup",
    "body": [
      "q-option-group(v-model='${1:group}', type='${2:checkbox}', color='${3:secondary}', :options='${4:options}')"
    ],
    "description": "The QOptionGroup component is a helper component that allows you better control for grouping binary (on or off, true or false, 1 or 0) form input components like checkboxes, radios or toggles. A good use for this component is for offering a set of options or settings to turn on and off."
  },
  "QSlider": {
    "prefix": "qslider",
    "body": [
      "q-slider(v-model='${1:model}', :min='${2:1}', :max='${3:7}', :step='${4:2}', color='${5:green}')"
    ],
    "description": "The QSlider is a great way for the user to specify a number value between a minimum and maximum value, with optional steps between valid values."
  },
  "QRange": {
    "prefix": "qrange",
    "body": [
      "q-range(v-model='${1:rangeValues}', :min='${2:0}', :max='${3:10}', :step='${4:1}', color='${5:green}')"
    ],
    "description": "Range component is a great way to offer the user the selection of a sub-range of values between a minimum and maximum value, with optional steps to select those values"
  },
  "QTime": {
    "prefix": "qtime",
    "body": [
      "q-time(v-model='${1:timeWithSeconds}', ${2:with-seconds})"
    ],
    "description": "The QTime component provides a method to input time."
  },
  "QDate": {
    "prefix": "qdate",
    "body": [
      "q-date(v-model='${1:date}', ${2:landscape}, ${3:minimal})"
    ],
    "description": "The QDate component provides a method to input date. Currently it supports Gregorian (default) and Persian calendars."
  },
  "QIcon": {
    "prefix": "qicon",
    "body": [
      "q-icon(name='${1:print}')"
    ],
    "description": "The QIcon component allows you to easily insert icons within other components or any other area of your pages."
  },
  "QImg": {
    "prefix": "qimg",
    "body": [
      "q-img(:src='${1:https://placeimg.com/500/300/nature}', :ratio='${2:16/9}', spinner-color='${3:primary}', spinner-size='${4:82px}')"
    ],
    "description": "The QImg component makes working with images (any picture format) easy and also adds a nice loading effect to it along with many other features (example: the ability to set an aspect ratio)."
  },
  "QInfiniteScroll": {
    "prefix": "qinfinitescroll",
    "body": [
      "q-infinite-scroll(@load='onLoad', :offset='250')",
      "\t.caption(v-for='(item, index) in items', :key='index')",
      "\t\tp Lorem ipsum dolor sit amet consectetur adipisicing elit.",
      "\ttemplate(v-slot:loading)"
    ],
    "description": "The QInfiteScroll component allows you to load new content as the user scrolls the page."
  },
  "QInnerLoading": {
    "prefix": "qinnerloading",
    "body": [
      "q-inner-loading(:showing='${1:visible}')",
      "\tq-spinner-gears(size='${2:50px}', color='${3:primary}')"
    ],
    "description": "The QInnerLoading component allows you to add a progress animation within a component. Much like the Loading Plugin, it’s purpose is to offer visual confirmation to the user that some process is happening in the background, which takes an excessive amount of time."
  },
  "QKnob": {
    "prefix": "qknob",
    "body": [
      "q-knob.${9:q-ma-md}(:min='${1:5}', :max='${2:10}', v-model='${3:value1}', ${4:show-value}, size='${5:50px}', :thickness='${6:0.22}', color='${7:teal}', track-color='${8:grey-3}')"
    ],
    "description": "The QKnob component is used to take a number input from the user through mouse/touch panning. It is based on QCircularProgress and inherits all its properties and behavior."
  },
  "QLinearProgress": {
    "prefix": "qlinearprogress",
    "body": [
      "q-linear-progress.${5:q-mt-sm}(:value='${1:progress}', ${2:rounded}, color='${3:purple}', track-color='${4:orange}')"
    ],
    "description": "The QLinearProgress component displays a colored loading bar. The bar can either have a determinate progress or an indeterminate animation. It should be used to inform the user that an action is occurring in the background."
  },
  "QList": {
    "prefix": "qlist",
    "body": [
      "q-list(bordered)",
      "\tq-item(${1:clickable}, ${2:v-ripple})",
      "\t\tq-item-section(${3:avatar})",
      "\t\t\tq-icon(color='${4:primary}', name='${5:bluetooth}')",
      "\t\tq-item-section Icon as avatar"
    ],
    "description": "The QList and QItem are a group of components which can work together to present multiple line items vertically as a single continuous element."
  },
  "QItem": {
    "prefix": "qitem",
    "body": [
      "q-item",
      "\tq-item-section(top, avatar)",
      "\t\tq-avatar(color='primary', text-color='white', icon='bluetooth')",
      "\tq-item-section",
      "\t\tq-item-label Single line item",
      "\t\tq-item-label(caption, lines='2') Secondary line text.",
      "\tq-item-section(side, top)",
      "\t\tq-item-label(caption) 5 min ago",
      "\t\tq-icon(name='star', color='yellow')"
    ],
    "description": "Lists can encapsulate Items or Item-like components, for example QCollapsible."
  },
  "QMarkupTable": {
    "prefix": "qmarkuptable",
    "body": [
      "q-markup-table ${1:Dessert}${2:Calories}${3:Frozen Yogurt}${4:159}"
    ],
    "description": "The QMarkupTable is a way for you to simply wrap a native <table> in order to make it look like a Material Design table."
  },
  "QMenu": {
    "prefix": "qmenu",
    "body": [
      "q-menu",
      "\tq-list(style='min-width: 100px')",
      "\t\tq-item(clickable, v-close-popup)",
      "\t\t\tq-item-section New tab",
      "\t\tq-separator",
      "\t\t\tq-item(clickable, v-close-popup)",
      "\t\t\t\tq-item-section New incognito tab"
    ],
    "description": "The QMenu component is a convenient way to show menus. Goes very well with QList as dropdown content, but it’s by no means limited to it."
  },
  "QNoSsr": {
    "prefix": "qnossr",
    "body": [
      "q-no-ssr",
      "\tdiv This won't be rendered on server"
    ],
    "description": "The QNoSsr component makes sense only if you are creating a SSR website/app. It avoids rendering its content on the server and leaves that for client only. Useful when you got code that is not isomorphic and can only run on the client side, in a browser."
  },
  "QResizeObservable": {
    "prefix": "qresizeobservable",
    "body": [
      "q-resize-observable(@resize='${1:onResize}') $0"
    ],
    "description": "QResizeObserver is a Quasar component that emits a resize event whenever the wrapping DOM element / component (defined as direct parent of QResizeObserver) changes its size (width and/or height)."
  },
  "QScrollObservable": {
    "prefix": "qscrollobservable",
    "body": [
      "q-scroll-observable(@scroll='${1:onScroll}')"
    ],
    "description": "QScrollObserver is a Quasar component that emits a scroll event whenever the user scrolls the page or overflowed container with .scroll CSS class applied to it."
  },
  "QPagination": {
    "prefix": "qpagination",
    "body": [
      "q-pagination(v-model='${1:current}', :max='${2:6}')"
    ],
    "description": "The QPagination component is available for whenever a pagination system is required. It offers the user a simple UI for moving between items or pages."
  },
  "QParallax": {
    "prefix": "qparallax",
    "body": [
      "q-parallax(src='${1:https://cdn.quasar.dev/img/parallax2.jpg}', :speed='${2:0.5}') $0"
    ],
    "description": "Parallax scrolling is a technique in computer graphics and web design, where background images move by the camera slower than foreground images, creating an illusion of depth in a 2D scene and adding to the immersion."
  },
  "QPopupEdit": {
    "prefix": "qpopupedit",
    "body": [
      "q-popup-edit(v-model='${1:props.row.name}', title='${2:Edit the Name}')",
      "\tq-input(v-model='${3:props.row.name}', ${4:dense}, ${5:autofocus})"
    ],
    "description": "The QPopupEdit component can be used to edit a value “in place”, like for example a cell in QTable. By default, a cell is displayed as a String, then if you are using QPopupEdit and a user clicks/taps on the table cell, a popup will open where the user will be able to edit the value using a textfield."
  },
  "QPopupProxy": {
    "prefix": "qpopupproxy",
    "body": [
      "q-popup-proxy",
      "\tq-banner",
      "\t\ttemplate(v-slot:avatar)",
      "\t\t| ${3:You have lost connection to the internet. This app is offline.}"
    ],
    "description": "QPopupProxy should be used when you need either a QMenu (on bigger screens) or a QDialog (on smaller screens) to be displayed. It acts as a proxy which picks either of the two components to use. QPopupProxy also handles context-menus."
  },
  "QPullToRefresh": {
    "prefix": "qpulltorefresh",
    "body": [
      "q-pull-to-refresh(@refresh='${1:refresh}', color='primary') $0"
    ],
    "description": "The QPullToRefresh is a component that allows the user to pull down in order to refresh page content (or retrieve the newest content)."
  },
  "QRating": {
    "prefix": "qrating",
    "body": [
      "q-rating(v-model='${1:ratingModel}', size='${2:1.5em}', icon='${3:star}')"
    ],
    "description": "Quasar Rating is a Component which allows users to rate items, usually known as “Star Rating”."
  },
  "QScrollArea": {
    "prefix": "qscrollarea",
    "body": [
      "q-scroll-area(style='width: ${1:400px}; height: ${2:200px};')",
      "\tdiv(v-for='${3:n} in ${4:10}') Lorem ipsum dolor sit amet, consectetur adipisicing"
    ],
    "description": "The QScrollArea component offers a neat way of customizing the scrollbars by encapsulating your content. Think of it as a DOM element which has overflow: auto, but with your own custom styled scrollbar instead of browser’s default one and a few nice features on top."
  },
  "QSeparator": {
    "prefix": "qseparator",
    "body": [
      "q-separator(${1:spaced}, ${2:inset}, ${3:vertical}, ${4:dark})"
    ],
    "description": "The QSeparator component is used to separate sections of text, other components, etc… It creates a colored line across the width of the parent. It can be horizontal or vertical."
  },
  "QSlideItem": {
    "prefix": "QSlideItem",
    "body": [
      "q-slide-item(@left='${1:onLeft}', @right='${2:onRight}')",
      "\ttemplate(v-slot:left)",
      "\ttemplate(v-slot:right)",
      "\tq-item",
      "\t\tq-item-section(avatar)",
      "\t\t\tq-avatar(color='${5:primary}', text-color='${6:white}', icon='${7:bluetooth}')",
      "\t\tq-item-section ${8:Icons only}"
    ],
    "description": "The QSlideItem component is essentially a QItem with two additional slots (left and right) which allows user to drag the item (through mouse or with the finger on a touch device) to one of the sides in order to apply a specific action."
  },
  "QToolbar": {
    "prefix": "qtoolbar",
    "body": [
      "q-toolbar(color='${1:primary}') $0"
    ],
    "description": "A Quasar Layout can have headers and/or footers (also called “marginals”) and this is a great place to use Toolbars, but note that you can also place Toolbars anywhere else you want. One QToolbar will represent a row in your marginals, usually used for navigation buttons and a title (but not limited to only this)."
  },
  "QToolbarTitle": {
    "prefix": "qtoolbartitle",
    "body": [
      "q-toolbar-title $0"
    ],
    "description": "Used to wrap the “title” of your Toolbar. It spreads horizontally to the full real estate space it can get. If not enough space to cover the full extent of the content then ending ellipsis are used."
  },
  "QTabs": {
    "prefix": "qtabs",
    "body": [
      "q-tabs",
      "\tq-tab(slot='${1:slot}', name='${2:name}', label='${3:label}')",
      "\t\tq-tab-pane(name='${4:name}') $0"
    ],
    "description": "Quasar Tabs are a way of displaying more information using less window real estate."
  },
  "QTab": {
    "prefix": "qtab",
    "body": [
      "q-tab(slot='${1:slot}', name='${2:name}', icon='${3:icon_name}', label='${4:label}') $0"
    ],
    "description": "QTab component is used to define a title for your Tab. Can be linked to a QTabPane through name prop."
  },
  "QTabPane": {
    "prefix": "qtabpane",
    "body": [
      "q-tab-pane(name='${1:name}') $0"
    ],
    "description": "The Tabs Pane component is useful, when the content of each tab is relatively small or simple."
  },
  "QRouteTab": {
    "prefix": "qroutetab",
    "body": [
      "q-route-tab(icon='${1:icon_name}', to='${2:route}', slot='${3:slot}', ${4:exact})"
    ],
    "description": "You will, in most cases, want to use tabs within a layout component. Below is an example of how this would be done."
  },
  "QContextMenu": {
    "prefix": "qcontextmenu",
    "body": [
      "q-context-menu",
      "\tq-list(link, separator, style='min-width: ${1:150px}; max-height: ${2:300px};')",
      "\t\tq-item(v-close-overlay, @click.native='${3:showToast}()')",
      "\t\t\tq-item-main(label='${4:Label}', sublabel='${5:Value}')",
      "\t\tq-item(v-close-overlay, @click.native='${6:showOtherToast}()')",
      "\t\t\tq-item-main(label='${7:Other Label}', sublabel='${8:Other Value}')"
    ],
    "description": "This component allows you to display a context menu (popup) instead of the default browser one when user performs a right-click (or long tap on touch capable devices)."
  },
  "QChipsInput": {
    "prefix": "qchipsinput",
    "body": [
      "q-chips-input(v-model='${1:model}', float-label='${2:Floating Label}')"
    ],
    "description": "A component that allows user to enter a group of text items, which is also editable in the form of quick deletion of the Chips in the list."
  },
  "QAutocomplete": {
    "prefix": "qautocomplete",
    "body": [
      "q-autocomplete(@search='${1:search}', :min-characters='${2:3}', @selected='${3:selected}')"
    ],
    "description": "A component that binds to the parent textfield (eg. QInput, QSearch, QChipsInput) and offers suggestions to the user, while the user is typing."
  },
  "QSearch": {
    "prefix": "qsearch",
    "body": [
      "q-search(v-model='${1:search}', icon='${2:place}', float-label='${2:search for a place}', ${3:clearable})"
    ],
    "description": "A component that offers the user an input field with additional features for searching purposes."
  },
  "QUploader": {
    "prefix": "quploader",
    "body": [
      "q-uploader(:url='${1:url}')"
    ],
    "description": "Quasar supplies a way for you to upload files through QUploader component."
  },
  "QCollapsible": {
    "prefix": "qcollapsible",
    "body": [
      "q-collapsible(group='${1:somegroup}', icon='${2:explore}', label='${3:First}')",
      "\tdiv $0"
    ],
    "description": "Quasar Collapsibles allow the hiding of content that is not immediately relevant to the user. Think of them as accordion elements that expand when clicked on."
  },
  "QTable": {
    "prefix": "qtable",
    "body": [
      "q-table(title='${1:Table Title}', :data='${2:tableData}', :columns='${3:columns}', row-key='${4:name}')"
    ],
    "description": "QTable is a Component that allows you to display data in a tabular manner."
  },
  "QWindowResizeObservable": {
    "prefix": "qwindowresizeobservable",
    "body": [
      "q-window-resize-observable(@resize='${1:onResize}') $0"
    ],
    "description": "A component that emits a resize event whenever the document viewport (window) changes its size"
  },
  "QStepper": {
    "prefix": "qstepper",
    "body": [
      "q-stepper(ref='${1:stepper}')",
      "\tq-step(default, title='${2:First Step}', subtitle='${3:Here we go}') ${4:step 1 content}",
      "\tq-step(title='${5:Step 2}', subtitle='${6:Review and submit}') ${7:step 2 content}"
    ],
    "description": "Quasar Stepper conveys progress through numbered steps. Steppers display progress through a sequence of logical and numbered steps."
  },
  "QStepperNavigation": {
    "prefix": "qsteppernavigation",
    "body": [
      "q-stepper-navigation",
      "\tq-btn(@click='${1:$refs.stepper.previous()}', label='${2:Back}')",
      "\t\tq-btn(@click='${3:$refs.stepper.next()}', label='${4:Next}')"
    ],
    "description": "QStepperNavigation is a helper for encapsulating Stepper navigation buttons (within QStep or globally for the stepper as direct child of QStepper)"
  },
  "QTree": {
    "prefix": "qtree",
    "body": [
      "q-tree(:nodes='${1:simple}', node-key='${2:label}')"
    ],
    "description": "Quasar Tree represents a highly configurable component that displays hierarchical data, such as a table of contents in a tree structure."
  },
  "QActionSheet": {
    "prefix": "qactionsheet",
    "body": [
      "q-action-sheet(v-model='${1:actionSheet}', title='${2:Action Sheet}', @ok='${3:onOk}', @cancel='${4:onCancel}', @show='${5:onShow}', @hide='${6:onHide}', :actions='[ { label: '${7:Delete}', icon: '${8:delete}', color: '${9:red}', handler: ${10:deleteAction} } ]') $0"
    ],
    "description": "Action Sheets slide up from the bottom edge of the device screen, and display a set of options with the ability to confirm or cancel an action. Action Sheets can sometimes be used as an alternative to menus, however, they should not be used for navigation."
  },
  "QModal": {
    "prefix": "qmodal",
    "body": [
      "q-modal(v-model='${1:opened}') $0"
    ],
    "description": "The Quasar Modal component is a UI overlay, which offers extended screen space to allow the user to get more work done."
  },
  "QPopover": {
    "prefix": "qpopover",
    "body": [
      "q-popover(v-model='${1:showing}') $0"
    ],
    "description": "QPopover should be used when you want a menu (or any content) to be displayed on a popup as a result of user clicking/tapping on a DOM element / component."
  },
  "QTooltip": {
    "prefix": "qtooltip",
    "body": [
      "q-tooltip(v-model='${1:showing}') $0"
    ],
    "description": "QTooltip should be used when you want to offer the user more information about a certain area in your App. When hovering the mouse over the target element (or quickly tapping on mobile platforms), the Tooltip will appear."
  },
  "QProgress": {
    "prefix": "qprogress",
    "body": [
      "q-progress(:percentage='${1:progressBuffer}', :buffer='${2:buffer}', style='${3:height: 4px}')"
    ],
    "description": "A Progress bar is used to show a process is being worked on, so the user isn’t staring at a static page, even though the system is working in the background."
  },
  "QSpinner": {
    "prefix": "qspinner",
    "body": [
      "q-spinner(${1:-gears}, color='${2:teal-4}', size='${3:40px}')"
    ],
    "description": "A Spinner is used to show the user a timely process is currently taking place."
  },
  "QVideo": {
    "prefix": "qvideo",
    "body": [
      "q-video(src='${1:https://www.youtube.com/embed/k3_tw44QsZQ?rel=0}', style=':width: ${2:853px}; height: ${3:480px}')"
    ],
    "description": "Embedding a video like Youtube is easy. It also resizes to fit the container by default."
  },
  "QSpace": {
    "prefix": "qspace",
    "body": [
      "q-space"
    ],
    "description": "The purpose of QSpace (has no props) is to simply fill all available space inside of a flexbox DOM element."
  },
  "QSplitter": {
    "prefix": "qsplitter",
    "body": [
      "q-splitter(v-model='${1:splitterModel}', style='${2:height: 400px}', ${3:horizontal})",
      "\ttemplate(v-slot:before)",
      "\ttemplate(v-slot:separator)",
      "\ttemplate(v-slot:after)"
    ],
    "description": "The QSplitter component allow containers to be split vertically and/or horizontally through a draggable separator bar."
  },
  "QTabPanels": {
    "prefix": "qtabpanels",
    "body": [
      "q-tab-panels.shadow-2.rounded-borders(v-model='${1:panel}', animated)",
      "\tq-tab-panel(name='${2:mails}')",
      "\t\t.text-h6 Mails",
      "\t\t| Lorem ipsum dolor sit amet consectetur adipisicing elit.",
      "\tq-tab-panel(name='${3:alarms}')",
      "\t\t.text-h6 Alarms",
      "\t\t| Lorem ipsum dolor sit amet consectetur adipisicing elit."
    ],
    "description": "Tab panels are a way of displaying more information using less window real estate."
  }
}